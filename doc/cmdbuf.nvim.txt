*cmdbuf.nvim.txt*

==============================================================================
Lua module: cmdbuf                                        *cmdbuf.nvim-cmdbuf*

open({opts})                                                   *cmdbuf.open()*
  Open a command buffer.

  Parameters: ~
    {opts} (table|nil) |cmdbuf.nvim-open-opts|

split_open({height}, {opts})                             *cmdbuf.split_open()*
  Open a command buffer with `split`.

  Parameters: ~
    {height} (number|nil) window height
    {opts} (table|nil) |cmdbuf.nvim-open-opts|

vsplit_open({width}, {opts})                            *cmdbuf.vsplit_open()*
  Open a command buffer with `vsplit`.

  Parameters: ~
    {width} (number|nil) window width
    {opts} (table|nil) |cmdbuf.nvim-open-opts|

tab_open({opts})                                           *cmdbuf.tab_open()*
  Open a command buffer in new tab.

  Parameters: ~
    {opts} (table|nil) |cmdbuf.nvim-open-opts|

execute({opts})                                             *cmdbuf.execute()*
  Execute the current line command.

  Parameters: ~
    {opts} (table|nil) |cmdbuf.nvim-open-opts|

delete({range})                                              *cmdbuf.delete()*
  Delete current line (or given range) from command history

  Parameters: ~
    {range} (table|nil) 1-based range {start number, end number}

==============================================================================
OPTIONS                                                  *cmdbuf.nvim-OPTIONS*

|cmdbuf.open()| options                                *cmdbuf.nvim-open-opts*

- {line} (number|nil): set this string to the bottom line in the buffer.
- {column} (number|nil): initial cursor column in the buffer.
- {type} (string|nil): handler type (default = "vim/cmd")
  - `vim/cmd`: |q:| alternative
  - `vim/sesarch/forward`: |q/| alternative
  - `vim/sesarch/backward`: |q?| alternative
  - `lua/cmd`: |q:| alternative for lua command

|cmdbuf.execute()| options                          *cmdbuf.nvim-execute-opts*

- {quit} (boolean|nil) whether quit the window after execution.

==============================================================================
AUTOCOMMANDS                                        *cmdbuf.nvim-AUTOCOMMANDS*

CmdbufNew                                              *cmdbuf.nvim-CmdbufNew*
  This is fired after creating a new cmdbuf.

==============================================================================
EXAMPLES                                                *cmdbuf.nvim-EXAMPLES*

>
  nnoremap q: <Cmd>lua require('cmdbuf').split_open(vim.o.cmdwinheight)<CR>
  cnoremap <C-f> <Cmd>lua require('cmdbuf').split_open(
    \ vim.o.cmdwinheight,
    \ {line = vim.fn.getcmdline(), column = vim.fn.getcmdpos()}
    \ )<CR><C-c>

  " Custom buffer mappings
  augroup cmdbuf_setting
    autocmd!
    autocmd User CmdbufNew call s:cmdbuf()
  augroup END
  function! s:cmdbuf() abort
    nnoremap <nowait> <buffer> q <Cmd>quit<CR>
    nnoremap <buffer> dd <Cmd>lua require('cmdbuf').delete()<CR>
  endfunction

  " open lua command-line-window
  nnoremap ql <Cmd>lua require('cmdbuf').split_open(
    \ vim.o.cmdwinheight,
    \ {type = "lua/cmd"}
    \ )<CR>

  " q/, q? alternative
  nnoremap q/ <Cmd>lua require('cmdbuf').split_open(
    \ vim.o.cmdwinheight,
    \ {type = "vim/search/forward"}
    \ )<CR>
  nnoremap q? <Cmd>lua require('cmdbuf').split_open(
    \ vim.o.cmdwinheight,
    \ {type = "vim/search/backward"}
    \ )<CR>
<

==============================================================================
vim:tw=78:ts=8:ft=help
